trigger:
- main
pool:
  vmImage: ubuntu-latest
# strategy:
#  matrix:
#    linux:
#      operatingSystem: ' ubuntu-latest'
#    mac:
#      operatingSystem: ' macos-latest' 


# pool:
#   vmImage: ubuntu-latest

# stages:
# - stage: Build
#   jobs:
#   - deployment: On_Board
#     environment: Build 
#     strategy:
#      runOnce:
#        deploy:
#          steps:
#            - script: echo Ready To Build
# - stage: Deployment
#   jobs:
#   - deployment: DevDeploy
#     environment: Dev
#     strategy:
#      runOnce:
#        deploy:
#          steps:
#            - script: echo deploy to dev
#   - deployment: FlowDevDeploy
#     environment: FlowDev
#     strategy:
#      runOnce:
#        deploy:
#          steps:
#            - script: echo deploy to Flowdev 
# - stage: QCDeploy
#   jobs:
#   - deployment: QCDeploy
#     environment: QC
#     strategy:
#      runOnce:
#        deploy:
#          steps:
#            - script: echo deploy to QC 
# - stage: ProdDeploy
#   jobs: 
#   - deployment: ProdDeploy
#     environment: Prod
#     strategy:
#      runOnce:
#        deploy:
#          steps:
#            - script: echo deploy to prod


steps:
- script: echo K8S Terraform Azure!
  displayName: 'Run a one-line script'

- task: TerraformTaskV4@4
  inputs:
    provider: 'aws'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/kubernetes'
    backendServiceAWS: 'AWS-for-terraform'
    backendAWSBucketName: 'terraform-backend-state-inkanna-2001'
    backendAWSKey: 'kubernetes-dev.tfstate'

- task: TerraformTaskV4@4
  inputs:
    provider: 'aws'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/aws/kubernetes'
    environmentServiceNameAWS: 'AWS-for-terraform'
